线程


当一个Java程序启动时会有一个主线程(main thread)立即启动，它的重要性体现在两方面：
1，它是产生其他子线程的线程。
2，通常它必须最后完成，因为它执行各种关闭动作。


线程状态

线程可以有以下四种状态：新生（new）、可运行（runnable）、被阻塞（blocked）、死亡（dead）。

新生

当用new操作符创建一个线程时，线程还没有开始运行，此时线程处于新生状态。

可运行

一旦调用了start方法，该线程就成为可运行的了。一个可运行线程可能实际上正在运行，也可能没有，这取决于操作系统为该线程提供的运行时间。

被阻塞

当发生下面任何一种情况时，线程就进入被阻塞状态：
1，线程通过调用sleep方法进入睡眠状态。
2，线程调用一个在IO上被阻塞的操作，即该操作在输入输出完成之前不会返回到它的调用者。
3，线程试图得到一个锁，而该锁正被其他线程持有。
4，线程在等待某个触发条件。

通过下面的任何一种途径，线程可以从被阻塞状态回到可运行状态：
1，线程被置于睡眠状态，且已经经过了指定毫秒数。
2，线程正在等待IO操作的完成，且该操作已经完成。
3，线程正在等待另一个线程所持有的锁，且另一个线程已经释放该锁的所有权（也有可能等待超时，当超时发生时，线程解除阻塞）。
4，线程正在等待某个触发条件，且另一个线程发出了信号表明条件已经发生了变化（如果为线程的等待设置了一个超时，那么当超时发生时该线程将解除阻塞）。

死亡

有两个原因会导致线程死亡：
1，run方法正常退出而自然死亡。
2，因为一个未捕获的异常终止了run方法而使线程猝死。