
在多线程环境编程时，为了避免数据不一致问题，通常会使用锁机制（synchronized或Lock）。但锁机制会产生如下问题：
1，死锁（Deadlock）
2，即使只有一个线程访问共享对象，它也必须要先获得锁然后再释放锁，造成性能损失。

为了避免上述问题并提供更优的性能，引入了compare-and-swap（CAS）方式。CAS操作通过以下3个步骤来实现对变量值的修改：
1，获取当前内存中变量的值。
2，用一个新的临时变量(temporal variable)保存改变后的新值。
3，如果当前内存中的值等于变量的旧值，则将新值赋值到变量；否则不进行任何操作。

使用CAS的方式可以不使用锁机制，从而避免了死锁。这种机制能保证多个并发线程对一个共享变量操作做到最终一致。
Java 在原子变量类（如 AtomicInteger）中实现了CAS机制，这些类提供了compareAndSet() 方法――――这个方法是CAS操作的实现和其他方法的基础。