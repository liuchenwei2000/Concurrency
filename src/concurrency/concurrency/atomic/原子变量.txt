

产生背景：
原子变量（Atomic Variables）在Java5版本被引入，用来提供对单个变量的原子操作支持。
这是因为在Java语言里，对正常变量的每个操作都会在编译时被转换成多条机器指令。比如对某个变量进行赋值操作，这在Java语言里只需要一条语句，
但编译源代码后，这条语句将会被转换成多条JVM指令。这样一来，当在多线程环境中共享某个变量时就会产生数据不一致问题。为此，Java引入了原子变量。


原理：
当某个线程正在操作一个原子变量时，如果其他线程也想操作这个变量，原子变量类会提供检查操作是否在一步内完成的机制。
也就是说，操作会先获取原子变量的值，修改本地变量值，然后尝试以新值替换原子变量的旧值，如果此时旧值仍然是最初获取的那个值，那就直接替换它；
否则再次进行上述操作步骤。这个操作步骤称为 Compare And Set（简称CAS，比较并交换）。


与锁机制的区别：
原子变量没有使用锁或其他同步机制来保护对变量值的访问，所有的操作都是基于CAS的。
这能保证多个线程可以在同一时间操作同一个原子变量而不会产生数据不一致问题，并且性能也会比使用加锁机制保护的变量要好。


示例模拟银行转账的操作，一个公司朝账户打钱，银行从账户扣钱（即两个线程同时修改某个变量的操作）。